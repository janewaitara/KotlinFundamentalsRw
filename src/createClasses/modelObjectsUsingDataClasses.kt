package createClasses

/**
 *
 * Data Classes have :
 *      copy()
 *      toString()
 *      equals()
 *      componentN()
 *      hashCode() generated by default
 *
 * Data objects don't change but if you have to change,
 * you create a copy of the original object, change it and disregard the old
 *
 * its thread safe
 *
 * */

data class MyPet(var name: String,var animalType: String)

data class MyInfo(val name: String,
             val lastName: String,
             val age: Int,
             val pet: MyPet)


fun main() {

    val dog = MyPet("Doggy","German shepherd")
    val jane = MyInfo("Jane","Waitara",21,dog)

    println(jane)

    //mutability
    val olderJane  = jane.copy(age = jane.age + 20)
    println(olderJane)

    //ability to deconstruct
    val(name:String , _:String? , age:Int, pet:createClasses.MyPet)= olderJane
    println(pet)

    //component functions gets the components depending on position

    val firstName = olderJane.component1()
    println(firstName)

    //comparing data classes
    var janeTwo = jane
    println(janeTwo == jane)
    println(janeTwo === jane)

    janeTwo = jane.copy() //copies data but creates a different object - reference
    println(janeTwo == jane)
    println(janeTwo === jane)



}